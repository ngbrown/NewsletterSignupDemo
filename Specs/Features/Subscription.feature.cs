// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Subscription")]
    public partial class SubscriptionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Subscription.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Subscription", "In order to get a newsletter about awsome deals\nAs a user\nI want to provide my fi" +
                    "rst and last name and e-mail address\nand get a success message if it was the fir" +
                    "st time.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New subscription")]
        public virtual void NewSubscription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New subscription", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("a subscription does not exist with an e-mail of \"jonny@boy.com\"");
#line 9
 testRunner.When("a user with the name \"Smith, John\" and e-mail \"jonny@boy.com\" subscribes");
#line 10
 testRunner.Then("a success message is displayed");
#line 11
 testRunner.And("the e-mail \"jonny@boy.com\" is not in the persistent store");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Already existing subscription")]
        public virtual void AlreadyExistingSubscription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Already existing subscription", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("a subscription does exist with a name of \"Smith, Jonny\" and an e-mail of \"jonny@b" +
                    "oy.com\"");
#line 15
 testRunner.When("a user with the name \"Smith, John\" and e-mail \"jonny@boy.com\" subscribes");
#line 16
 testRunner.Then("a error message is displayed");
#line 17
 testRunner.And("the e-mail \"jonny@boy.com\" is in the persistent store");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Removing existing subscription")]
        public virtual void RemovingExistingSubscription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing existing subscription", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("a subscription does exist with a name of \"Smith, Jonny\" and an e-mail of \"jonny@b" +
                    "oy.com\"");
#line 21
 testRunner.When("a user with the name \"Smith, John\" and e-mail \"jonny@boy.com\" un-subscribes");
#line 22
 testRunner.Then("a success message is displayed");
#line 23
 testRunner.And("the e-mail \"jonny@boy.com\" is not in the persistent store");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempting to remove non-existing subscription")]
        public virtual void AttemptingToRemoveNon_ExistingSubscription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempting to remove non-existing subscription", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("a subscription does not exist with an e-mail of \"jonny@boy.com\"");
#line 27
 testRunner.When("a user with the name \"Smith, John\" and e-mail \"jonny@boy.com\" un-subscribes");
#line 28
 testRunner.Then("a error message is displayed");
#line 29
 testRunner.And("the e-mail \"jonny@boy.com\" is not in the persistent store");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
